package require tcltest
package require llvmtcl
namespace import llvmtcl::*

tcltest::test tebc-expr {Convert Tcl to llvm, optimize and run it} -setup {
    proc test {a} {
	return [expr {4+$a+6}]
    }
    LLVMLinkInJIT
    LLVMInitializeNativeTarget
    set m [LLVMModuleCreateWithName "tebc_expr"]
} -body {
    set f [Tcl2LLVM $m "test"]
    lassign [LLVMVerifyModule $m LLVMReturnStatusAction] rt msg
    if {$rt} { error $msg }
    LLVMOptimize $m [list $f]
    LLVMExecute $m $f 5
} -cleanup {
    LLVMDisposeModule $m
} -result {15}

tcltest::test tebc-if-then-else {Convert Tcl to llvm, optimize and run it} -setup {
    proc test {a} {
	if {$a <= 66 && $a > 50} {
	    set rt 100
	} else {
	    set rt 0
	}
	return $rt
    }
    LLVMLinkInJIT
    LLVMInitializeNativeTarget
    set m [LLVMModuleCreateWithName "tebc_if_then_else"]
} -body {
    set f [Tcl2LLVM $m "test"]
    lassign [LLVMVerifyModule $m LLVMReturnStatusAction] rt msg
    if {$rt} { error $msg }
    LLVMOptimize $m [list $f]
    set result {}
    lappend result [LLVMExecute $m $f 5]
    lappend result [LLVMExecute $m $f 55]
    lappend result [LLVMExecute $m $f 555]
} -cleanup {
    LLVMDisposeModule $m
} -result {0 100 0}

tcltest::test tebc-for {Convert Tcl to llvm, optimize and run it} -setup {
    proc test {a} {
	set rt 1
	for {set i 1} {$i < $a} {incr i} {
	    set rt [expr {$rt*$i}]
	}
	return $rt
    }
    LLVMLinkInJIT
    LLVMInitializeNativeTarget
    set m [LLVMModuleCreateWithName "tebc_for"]
} -body {
    set f [Tcl2LLVM $m "test"]
    lassign [LLVMVerifyModule $m LLVMReturnStatusAction] rt msg
    if {$rt} { error $msg }
    LLVMOptimize $m [list $f]
    set result {}
    lappend result [LLVMExecute $m $f 0]
    lappend result [LLVMExecute $m $f 5]
    lappend result [LLVMExecute $m $f 10]
} -cleanup {
    LLVMDisposeModule $m
} -result {1 24 362880}

tcltest::test tebc-call {Convert Tcl to llvm, optimize and run it} -setup {
    proc callee {a b} {
	return [expr {$a+$b}]
    }
    proc caller {a b} {
	return [expr {12+[callee $a $b]+34}]
    }
    LLVMLinkInJIT
    LLVMInitializeNativeTarget
    set m [LLVMModuleCreateWithName "tebc_call"]
} -body {
    Tcl2LLVM $m "callee"
    set f [Tcl2LLVM $m "caller"]
    lassign [LLVMVerifyModule $m LLVMReturnStatusAction] rt msg
    if {$rt} { error $msg }
    LLVMOptimize $m [list $f]
    set result {}
    lappend result [LLVMExecute $m $f 0 0]
    lappend result [LLVMExecute $m $f 5 10]
} -cleanup {
    LLVMDisposeModule $m
} -result {46 61}

tcltest::test tebc-recursive {Convert Tcl to llvm, optimize and run it} -setup {
    proc fact n {expr {$n<2? 1: $n * [fact [incr n -1]]}}
    proc facti n {
	set rt 1
	while {$n > 1} {
	    set rt [expr {$rt*$n}]
	    incr n -1
	}
	return $rt
    }
    proc fact10 { } {
	return [fact 10]
    }
    LLVMLinkInJIT
    LLVMInitializeNativeTarget
    set m [LLVMModuleCreateWithName "tebc_recursive"]
} -body {
    set f [Tcl2LLVM $m "fact"]
    set fi [Tcl2LLVM $m "facti"]
    set f10 [Tcl2LLVM $m "fact10"]
    lassign [LLVMVerifyModule $m LLVMReturnStatusAction] rt msg
    if {$rt} { error $msg }
    LLVMOptimize $m [list $f $fi $f10]
    set result {}
    lappend result [LLVMExecute $m $f 5]
    lappend result [LLVMExecute $m $fi 6]
    lappend result [LLVMExecute $m $f10]
} -cleanup {
    LLVMDisposeModule $m
} -result {120 720 3628800}

tcltest::test tebc-filter {Convert Tcl to llvm, optimize and run it} -setup {
    proc low_pass {x x1 x2 y1 y2 C0 C1 C2 C3 C4} {
	return [expr {$x*$C0 + $x1*$C1 + $x2*$C2 + $y1*$C3 + $y2*$C4}]
    }
    proc filter { } {
	set y 0
	set x1 0
	set x2 0
	set y1 0
	set y2 0
	for {set i 0} {$i < 1000} {incr i} {
	    set y [low_pass $i $x1 $x2 $y1 $y2 1 3 -2 4 -5]
	    # Messing with the result to stay within 32 bit
	    if {$y > 1000 || $y < -1000} {
		set y 1
	    } else {
		set y1 $y
	    }
	    set y2 $y1
	    set y1 $y
	    set x2 $x1
	    set x1 $i
	}
	return $y
    }
    LLVMLinkInJIT
    LLVMInitializeNativeTarget
    set m [LLVMModuleCreateWithName "tebc_recursive"]
} -body {
    Tcl2LLVM $m "low_pass" 1
    set f [Tcl2LLVM $m "filter"]
    Tcl2LLVM $m "low_pass"
    lassign [LLVMVerifyModule $m LLVMReturnStatusAction] rt msg
    if {$rt} { error $msg }
    LLVMOptimize $m [list $f]
    set result {}
    lappend result [LLVMExecute $m $f]
} -cleanup {
    LLVMDisposeModule $m
} -result {999}

# cleanup
::tcltest::cleanupTests
return
